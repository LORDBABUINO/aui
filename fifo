#!/bin/bash

if [[ -f `pwd`/sharedfuncs ]]; then
  source ./sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

setKeymap(){
	loadkeys br-abnt2
}

setEditor(){
	export EDITOR="vim"
}

getLastestMirrorlist(){
  curl -so $1 $2
  sed -i 's/^#Server/Server/g' $1
}

backupAndReplaceMirrorlistFile(){
  if [[ -s $1 ]]; then
   { echo " Backing up the original mirrorlist..."
     mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig; } &&
   { echo " Rotating the new list into place..."
     mv -i $1 /etc/pacman.d/mirrorlist; }
  else
    echo " Unable to update, could not download list."
  fi
}

rankMirrorlist(){
  pacman -Sy --noconfirm pacman-contrib
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.tmp
  rankmirrors /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
  rm /etc/pacman.d/mirrorlist.tmp
  chmod +r /etc/pacman.d/mirrorlist
}

configure_mirrorlist(){
  url="https://www.archlinux.org/mirrorlist/?country=BR&use_mirror_status=on"

  tmpfile=$(mktemp --suffix=-mirrorlist)

  getLastestMirrorlist $tmpfile $url
  backupAndReplaceMirrorlistFile $tmpfile
  rankMirrorlist
}

select_device(){
  devices_list=(`lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'`);
  PS3="$prompt1"
  echo -e "Attached Devices:\n"
  lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}'| column -t
  echo -e "\n"
  echo -e "Select device to partition:\n"
  select device in "${devices_list[@]}"; do
    if contains_element "${device}" "${devices_list[@]}"; then
      break
    else
      invalid_option
    fi
  done
  BOOT_MOUNTPOINT=$device
}

create_partition(){
  apps_list=("cfdisk" "cgdisk" "fdisk" "gdisk" "parted");
  PS3="$prompt1"
  echo -e "Select partition program:"
  select OPT in "${apps_list[@]}"; do
    if contains_element "$OPT" "${apps_list[@]}"; then
      select_device
      case $OPT in
        parted)
          parted -a opt ${device}
          ;;
        *)
          $OPT ${device}
          ;;
      esac
      break
    else
      invalid_option
    fi
  done
}

create_partition_scheme(){
  LUKS=0
  LVM=0
  PS3="$prompt1"
  echo -e "Select partition scheme:"
  create_partition
}

format_partitions(){
  i=0

  block_list=(`lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'`)

  # check if there is no partition
  if [[ ${#block_list[@]} -eq 0 ]]; then
    echo "No partition found"
    exit 0
  fi

  partitions_list=()
  for OPT in ${block_list[@]}; do
    check_lvm=`echo $OPT | grep lvm`
    if [[ -z $check_lvm ]]; then
      partitions_list+=("/dev/$OPT")
    else
      partitions_list+=("/dev/mapper/$OPT")
    fi
  done

  # partitions based on boot system
  if [[ $UEFI -eq 1 ]]; then
    partition_name=("root" "EFI" "swap" "another")
  else
    partition_name=("root" "swap" "another")
  fi

  select_filesystem(){
    filesystems_list=( "btrfs" "ext2" "ext3" "ext4" "f2fs" "jfs" "nilfs2" "ntfs" "reiserfs" "vfat" "xfs");
    PS3="$prompt1"
    echo -e "Select filesystem:\n"
    select filesystem in "${filesystems_list[@]}"; do
      if contains_element "${filesystem}" "${filesystems_list[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }

  disable_partition(){
    #remove the selected partition from list
    unset partitions_list[${partition_number}]
    partitions_list=(${partitions_list[@]})
    #increase i
    [[ ${partition_name[i]} != another ]] && i=$(( i + 1 ))
  }

  format_partition(){
    read_input_text "Confirm format $1 partition"
    if [[ $OPTION == y ]]; then
      [[ -z $3 ]] && select_filesystem || filesystem=$3
      mkfs.${filesystem} $1 \
        $([[ ${filesystem} == xfs || ${filesystem} == btrfs || ${filesystem} == reiserfs ]] && echo "-f") \
        $([[ ${filesystem} == vfat ]] && echo "-F32") \
        $([[ $TRIM -eq 1 && ${filesystem} == ext4 ]] && echo "-E discard") \
        $([[ $TRIM -eq 1 && ${filesystem} == btrfs ]] && echo "-O discard")
      fsck $1
      mkdir -p $2
      mount -t ${filesystem} $1 $2
      disable_partition
    fi
  }

  format_swap_partition(){
    read_input_text "Confirm format $1 partition"
    if [[ $OPTION == y ]]; then
      mkswap $1
      swapon $1
      disable_partition
    fi
  }

  create_swap(){
    swap_options=("partition" "file" "skip");
    PS3="$prompt1"
    echo -e "Select ${BYellow}${partition_name[i]}${Reset} filesystem:\n"
    select OPT in "${swap_options[@]}"; do
      case "$REPLY" in
        1)
          select partition in "${partitions_list[@]}"; do
            #get the selected number - 1
            partition_number=$(( $REPLY - 1 ))
            if contains_element "${partition}" "${partitions_list[@]}"; then
              format_swap_partition "${partition}"
            fi
            break
          done
          swap_type="partition"
          break
          ;;
        2)
          total_memory=`grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//'`
          fallocate -l ${total_memory}M ${MOUNTPOINT}/swapfile
          chmod 600 ${MOUNTPOINT}/swapfile
          mkswap ${MOUNTPOINT}/swapfile
          swapon ${MOUNTPOINT}/swapfile
          i=$(( i + 1 ))
          swap_type="file"
          break
          ;;
        3)
          i=$(( i + 1 ))
          swap_type="none"
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
  }

  check_mountpoint(){
    if mount | grep $2; then
      echo "Successfully mounted"
      disable_partition "$1"
    else
      echo "WARNING: Not Successfully mounted"
    fi
  }

  set_efi_partition(){
    efi_options=("/boot/efi" "/boot")
    PS3="$prompt1"
    echo -e "Select EFI mountpoint:\n"
    select EFI_MOUNTPOINT in "${efi_options[@]}"; do
      if contains_element "${EFI_MOUNTPOINT}" "${efi_options[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }

  while true; do
    PS3="$prompt1"
    if [[ ${partition_name[i]} == swap ]]; then
      create_swap
    else
      echo -e "Select ${BYellow}${partition_name[i]}${Reset} partition:\n"
      select partition in "${partitions_list[@]}"; do
        #get the selected number - 1
        partition_number=$(( $REPLY - 1 ))
        if contains_element "${partition}" "${partitions_list[@]}"; then
          case ${partition_name[i]} in
            root)
              ROOT_PART=`echo ${partition} | sed 's/\/dev\/mapper\///' | sed 's/\/dev\///'`
              ROOT_MOUNTPOINT=${partition}
              format_partition "${partition}" "${MOUNTPOINT}"
              ;;
            EFI)
              set_efi_partition
              read_input_text "Format ${partition} partition"
              if [[ $OPTION == y ]]; then
                format_partition "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}" vfat
              else
                mkdir -p "${MOUNTPOINT}${EFI_MOUNTPOINT}"
                mount -t vfat "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
                check_mountpoint "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
              fi
              ;;
            another)
              read -p "Mountpoint [ex: /home]:" directory
              [[ $directory == "/boot" ]] && BOOT_MOUNTPOINT=`echo ${partition} | sed 's/[0-9]//'`
              select_filesystem
              read_input_text "Format ${partition} partition"
              if [[ $OPTION == y ]]; then
                format_partition "${partition}" "${MOUNTPOINT}${directory}" "${filesystem}"
              else
                read_input_text "Confirm fs="${filesystem}" part="${partition}" dir="${directory}""
                if [[ $OPTION == y ]]; then
                  mkdir -p ${MOUNTPOINT}${directory}
                  mount -t ${filesystem} ${partition} ${MOUNTPOINT}${directory}
                  check_mountpoint "${partition}" "${MOUNTPOINT}${directory}"
                fi
              fi
              ;;
          esac
          break
        else
          invalid_option
        fi
      done
    fi
    #check if there is no partitions left
    if [[ ${#partitions_list[@]} -eq 0 && ${partition_name[i]} != swap ]]; then
      break
    elif [[ ${partition_name[i]} == another ]]; then
      read_input_text "Configure more partitions"
      [[ $OPTION != y ]] && break
    fi
  done
}

install_base_system(){
  pacman -Sy --noconfirm archlinux-keyring
  rm ${MOUNTPOINT}${EFI_MOUNTPOINT}/vmlinuz-linux
  pacstrap ${MOUNTPOINT} base linux-headers base-devel parted btrfs-progs\
	  f2fs-tools net-tools
  [[ $? -ne 0 ]] && error_msg "Installing base system to ${MOUNTPOINT} failed. Check error messages above."
  local PTABLE=`parted -l | grep "gpt"`
  [[ -n $PTABLE ]] && pacstrap ${MOUNTPOINT} gptfdisk
  WIRELESS_DEV=`ip link | grep wl | awk '{print $2}'| sed 's/://' | sed '1!d'`
  if [[ -n $WIRELESS_DEV ]]; then
    pacstrap ${MOUNTPOINT} iw wireless_tools wpa_actiond wpa_supplicant dialog
  else
    WIRED_DEV=`ip link | grep "ens\|eno\|enp" | awk '{print $2}'| sed 's/://' | sed '1!d'`
    if [[ -n $WIRED_DEV ]]; then
      arch_chroot "systemctl enable dhcpcd@${WIRED_DEV}.service"
    fi
  fi
  if is_package_installed "espeakup"; then
    pacstrap ${MOUNTPOINT} alsa-utils espeakup brltty
    arch_chroot "systemctl enable espeakup.service"
  fi
}

configure_keymap(){
  echo "KEYMAP=br-abnt2" > ${MOUNTPOINT}/etc/vconsole.conf
}

configure_fstab(){
  if [[ ! -f ${MOUNTPOINT}/etc/fstab.aui ]]; then
    cp ${MOUNTPOINT}/etc/fstab ${MOUNTPOINT}/etc/fstab.aui
  else
    cp ${MOUNTPOINT}/etc/fstab.aui ${MOUNTPOINT}/etc/fstab
  fi

  PS3="$prompt1"
  echo -e "Configure fstab based on: UUID"
  if [[ $UEFI -eq 1 ]]; then
   genfstab -t PARTUUID -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
  else
   genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
  fi
  fstab="UUID"
  [[ -f ${MOUNTPOINT}/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" ${MOUNTPOINT}/etc/fstab
  $EDITOR ${MOUNTPOINT}/etc/fstab
}

configure_hostname(){
  echo "archlinux" > ${MOUNTPOINT}/etc/hostname
  if [[ ! -f ${MOUNTPOINT}/etc/hosts.aui ]]; then
    cp ${MOUNTPOINT}/etc/hosts ${MOUNTPOINT}/etc/hosts.aui
  else
    cp ${MOUNTPOINT}/etc/hosts.aui ${MOUNTPOINT}/etc/hosts
  fi
  arch_chroot "sed -i '/127.0.0.1/s/$/ '${host_name}'/' /etc/hosts"
  arch_chroot "sed -i '/::1/s/$/ '${host_name}'/' /etc/hosts"
}

configure_timezone(){
  ZONE="America"
  SUBZONE="Sao_Paulo"
  arch_chroot "ln -sf /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
  arch_chroot "sed -i '/#NTP=/d' /etc/systemd/timesyncd.conf"
  arch_chroot "sed -i 's/#Fallback//' /etc/systemd/timesyncd.conf"
  arch_chroot "echo \"FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 0.fr.pool.ntp.org\" >> /etc/systemd/timesyncd.conf"
  arch_chroot "systemctl enable systemd-timesyncd.service"
}

configure_hardwareclock(){
  PS3="$prompt1"
  arch_chroot "hwclock --systohc --localtime";
  hwclock='Localtime'
}

configure_locale(){
  echo 'LANG="en_US.UTF-8"' > ${MOUNTPOINT}/etc/locale.conf
  arch_chroot "sed -i 's/#\(pt_BR\)/\1/' /etc/locale.gen"
  arch_chroot "sed -i 's/#\(en_US\)/\1/' /etc/locale.gen"
  arch_chroot "locale-gen"
}

configure_mkinitcpio(){
  [[ $LUKS -eq 1 ]] && sed -i '/^HOOK/s/block/block keymap encrypt/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  [[ $LVM -eq 1 ]] && sed -i '/^HOOK/s/filesystems/lvm2 filesystems/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  if [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep hardened -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-hardened"
  elif [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep lts -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-lts"
  else
    arch_chroot "mkinitcpio -p linux"
  fi
}

install_bootloader(){
  PS3="$prompt1"
  echo -e "Install bootloader:\n"
  pacstrap ${MOUNTPOINT} grub
  [[ $UEFI -eq 1 ]] && pacstrap ${MOUNTPOINT} efibootmgr dosfstools
}

configure_bootloader(){
  if [[ $UEFI -eq 1 ]]; then
    arch_chroot "grub-install --target=x86_64-efi --efi-directory=${EFI_MOUNTPOINT} --bootloader-id=arch_grub --recheck"
  else
    arch_chroot "grub-install --target=i386-pc --recheck ${BOOT_MOUNTPOINT}"
  fi
  arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
}

umount_partitions(){
  mounted_partitions=(`lsblk | grep ${MOUNTPOINT} | awk '{print $7}' | sort -r`)
  swapoff -a
  for i in ${mounted_partitions[@]}; do
    umount $i
  done
}

select_pos_installer_script(){
  script_list=("LARBS" "aui" "other" );
  PS3="$prompt1"
  echo -e "Select pos-intaller script:"
  select OPT in "${script_list[@]}"; do
    if contains_element "$OPT" "${script_list[@]}"; then
      case $OPT in
	other)
	  read -p "Write the pos-installer repository URL: " url
	  read -p "Write the repository name" repository_name
	  read -p "Write the script name" script_name
	  git clone url $MOUNTPOINT/root/$repository_name
	  echo "cd ${repository_name}" > ${MOUNTPOINT}/root/.profile
	  echo "sh ./${script_name}" >> ${MOUNTPOINT}/root/.profile
	  ;;
        LARBS)
	  git clone https://github.com/LORDBABUINO/${OPT}.git $MOUNTPOINT/root/${OPT}
	  echo "cd ${OPT}" >> ${MOUNTPOINT}/root/.profile
	  echo "sh ./larbs.sh" >> ${MOUNTPOINT}/root/.profile
          ;;
        aui)
	  git clone https://github.com/LORDBABUINO/${OPT}.git $MOUNTPOINT/root/${OPT}
	  echo "cd ${OPT}" >> ${MOUNTPOINT}/root/.profile
	  echo "sh ./lilo" >> ${MOUNTPOINT}/root/.profile
          ;;
      esac
      echo "rm -r /etc/systemd/system/getty@tty1.service.d" >> ${MOUNTPOINT}/root/.profile
      echo "rm ${MOUNTPOINT}/root/.profile" >> ${MOUNTPOINT}/root/.profile
      break
    else
      invalid_option
    fi
  done
}

finish(){
  cp -a dotfiles/. ${MOUNTPOINT}/root
  cp -R /etc/systemd/system/getty@tty1.service.d ${MOUNTPOINT}/etc/systemd/system
  umount_partitions
  reboot
  exit 0
}

check_boot_system
check_connection
check_trim
pacman -Sy --noconfirm
setKeymap
setEditor
configure_mirrorlist
create_partition_scheme
format_partitions
install_base_system
configure_keymap
configure_fstab
configure_hostname
configure_timezone
configure_hardwareclock
configure_locale
configure_mkinitcpio
install_bootloader
configure_bootloader
select_pos_installer_script
finish
